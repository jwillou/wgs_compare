#!/bin/sh -l

#PBS -N comp_start
#PBS -q standby
#PBS -l nodes=1:ppn=1,naccesspolicy=singleuser
#PBS -l walltime=336:00:00
#PBS -e compare_blast.sterror
#PBS -o compare_blast.stout

cd /scratch/snyder/j/jwillou/wgs/compare/mtblast_21 #$PBS_O_WORKDIR

#create submission files
count=0
cat mtDNAcompare.txt | while IFS=$'\t' read -r class sp1 sp2 
	do
	sp2="${sp2%\\n}" #basically, perl chomp
	sp1="${sp1%\\n}"
	count=$((count+1))
	printf '#!/bin/bash\n' > "blast${count}".job
	printf "#PBS -N comp_${sp1}_${sp2}\n" >> "blast${count}".job
	printf "#PBS -q standby\n" >> "blast${count}".job
	printf "#PBS -l nodes=1:ppn=1,naccesspolicy=singleuser\n" >> "blast${count}".job
	printf "#PBS -l walltime=4:00:00\n" >> "blast${count}".job
	printf "#PBS -e ${sp1}_${sp2}/${sp1}_${sp2}.sterror\n" >> "blast${count}".job
	printf "#PBS -o ${sp1}_${sp2}/${sp1}_${sp2}.stout\n" >> "blast${count}".job
	printf "\n" >> "blast${count}".job
	printf "cd /scratch/snyder/j/jwillou/wgs/compare/mtblast_21\n" >> "blast${count}".job
	printf "module load blast/2.9.0+\n" >> "blast${count}".job
	printf "\n" >> "blast${count}".job
	printf "mkdir -p -- ${sp1}_${sp2}\n" >> "blast${count}".job
	printf "cd ${sp1}_${sp2}\n" >> "blast${count}".job
	printf "\n" >> "blast${count}".job
	printf "perl ../../../wgs_compare/fastasplit_chunks1000.pl ../../../mtdata/${sp2}/sequence.fasta_unmask_format.fa > ../../../mtdata/${sp2}/sequence_unmask_format1000.fasta\n" >> "blast${count}".job
	printf "makeblastdb -in ../../../mtdata/${sp1}/sequence.fasta_unmask_format.fa -dbtype nucl\n" >> "blast${count}".job	
	printf "blastn -query ../../../mtdata/${sp2}/sequence_unmask_format1000.fasta -db ../../../mtdata/${sp1}/sequence.fasta_unmask_format.fa -out outblast21.txt -outfmt '6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore nident mismatch gapopen gaps qseq sseq' -perc_identity 3 -qcov_hsp_perc 3 -culling_limit 1 -max_target_seqs 1 -evalue 10 -num_threads 10\n" >> "blast${count}".job
	printf "echo "${sp1}_${sp2}" >> ../MTblast.txt\n" >> "blast${count}".job
done

#change permissions
chmod u+x blast*

#get list of files
ls blast* > blast.txt 

#submit list
printf '#!/bin/bash\n' > joblist.job
printf "#PBS -N joblist\n" >> joblist.job
printf "#PBS -q standby\n" >> joblist.job
printf "#PBS -l nodes=1:ppn=1,naccesspolicy=singleuser\n" >> joblist.job
printf "#PBS -l walltime=336:00:00\n" >> joblist.job
printf "#PBS -e jlist.sterror\n" >> joblist.job
printf "#PBS -o jlist.stout\n" >> joblist.job
printf "cd /scratch/snyder/j/jwillou/wgs/compare/mtblast_21\n" >> joblist.job
cat blast.txt | while IFS= read -r LINE
do
	printf "qsub ${LINE}\n" >> joblist.job	
done
chmod u+x joblist.job
qsub joblist.job 

#clean up
# rm blast.txt
# mkdir files_blast
# mv blast* files_blast
# mv joblist.job files_blast
# mv jlist* files_blast

# Bowtie 2 version 2.3.3.1 by Ben Langmead (langmea@cs.jhu.edu, www.cs.jhu.edu/~langmea)
# Usage:
#   bowtie2 [options]* -x <bt2-idx> {-1 <m1> -2 <m2> | -U <r> | --interleaved <i>} [-S <sam>]
# 
#   <bt2-idx>  Index filename prefix (minus trailing .X.bt2).
#              NOTE: Bowtie 1 and Bowtie 2 indexes are not compatible.
#   <m1>       Files with #1 mates, paired with files in <m2>.
#              Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).
#   <m2>       Files with #2 mates, paired with files in <m1>.
#              Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).
#   <r>        Files with unpaired reads.
#              Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).
#   <i>        Files with interleaved paired-end FASTQ reads
#              Could be gzip'ed (extension: .gz) or bzip2'ed (extension: .bz2).
#   <sam>      File for SAM output (default: stdout)
# 
#   <m1>, <m2>, <r> can be comma-separated lists (no whitespace) and can be
#   specified many times.  E.g. '-U file1.fq,file2.fq -U file3.fq'.
# 
# Options (defaults in parentheses):
# 
#  Input:
#   -q                 query input files are FASTQ .fq/.fastq (default)
#   --tab5             query input files are TAB5 .tab5
#   --tab6             query input files are TAB6 .tab6
#   --qseq             query input files are in Illumina's qseq format
#   -f                 query input files are (multi-)FASTA .fa/.mfa
#   -r                 query input files are raw one-sequence-per-line
#   -c                 <m1>, <m2>, <r> are sequences themselves, not files
#   -s/--skip <int>    skip the first <int> reads/pairs in the input (none)
#   -u/--upto <int>    stop after first <int> reads/pairs (no limit)
#   -5/--trim5 <int>   trim <int> bases from 5'/left end of reads (0)
#   -3/--trim3 <int>   trim <int> bases from 3'/right end of reads (0)
#   --phred33          qualities are Phred+33 (default)
#   --phred64          qualities are Phred+64
#   --int-quals        qualities encoded as space-delimited integers
# 
#  Presets:                 Same as:
#   For --end-to-end:
#    --very-fast            -D 5 -R 1 -N 0 -L 22 -i S,0,2.50
#    --fast                 -D 10 -R 2 -N 0 -L 22 -i S,0,2.50
#    --sensitive            -D 15 -R 2 -N 0 -L 22 -i S,1,1.15 (default)
#    --very-sensitive       -D 20 -R 3 -N 0 -L 20 -i S,1,0.50
# 
#   For --local:
#    --very-fast-local      -D 5 -R 1 -N 0 -L 25 -i S,1,2.00
#    --fast-local           -D 10 -R 2 -N 0 -L 22 -i S,1,1.75
#    --sensitive-local      -D 15 -R 2 -N 0 -L 20 -i S,1,0.75 (default)
#    --very-sensitive-local -D 20 -R 3 -N 0 -L 20 -i S,1,0.50
# 
#  Alignment:
#   -N <int>           max # mismatches in seed alignment; can be 0 or 1 (0)
#   -L <int>           length of seed substrings; must be >3, <32 (22)
#   -i <func>          interval between seed substrings w/r/t read len (S,1,1.15)
#   --n-ceil <func>    func for max # non-A/C/G/Ts permitted in aln (L,0,0.15)
#   --dpad <int>       include <int> extra ref chars on sides of DP table (15)
#   --gbar <int>       disallow gaps within <int> nucs of read extremes (4)
#   --ignore-quals     treat all quality values as 30 on Phred scale (off)
#   --nofw             do not align forward (original) version of read (off)
#   --norc             do not align reverse-complement version of read (off)
#   --no-1mm-upfront   do not allow 1 mismatch alignments before attempting to
#                      scan for the optimal seeded alignments
#   --end-to-end       entire read must align; no clipping (on)
#    OR
#   --local            local alignment; ends might be soft clipped (off)
# 
#  Scoring:
#   --ma <int>         match bonus (0 for --end-to-end, 2 for --local)
#   --mp <int>         max penalty for mismatch; lower qual = lower penalty (6)
#   --np <int>         penalty for non-A/C/G/Ts in read/ref (1)
#   --rdg <int>,<int>  read gap open, extend penalties (5,3)
#   --rfg <int>,<int>  reference gap open, extend penalties (5,3)
#   --score-min <func> min acceptable alignment score w/r/t read length
#                      (G,20,8 for local, L,-0.6,-0.6 for end-to-end)
# 
#  Reporting:
#   (default)          look for multiple alignments, report best, with MAPQ
#    OR
#   -k <int>           report up to <int> alns per read; MAPQ not meaningful
#    OR
#   -a/--all           report all alignments; very slow, MAPQ not meaningful
# 
#  Effort:
#   -D <int>           give up extending after <int> failed extends in a row (15)
#   -R <int>           for reads w/ repetitive seeds, try <int> sets of seeds (2)
# 
#  Paired-end:
#   -I/--minins <int>  minimum fragment length (0)
#   -X/--maxins <int>  maximum fragment length (500)
#   --fr/--rf/--ff     -1, -2 mates align fw/rev, rev/fw, fw/fw (--fr)
#   --no-mixed         suppress unpaired alignments for paired reads
#   --no-discordant    suppress discordant alignments for paired reads
#   --dovetail         concordant when mates extend past each other
#   --no-contain       not concordant when one mate alignment contains other
#   --no-overlap       not concordant when mates overlap at all
# 
#  Output:
#   -t/--time          print wall-clock time taken by search phases
#   --un <path>           write unpaired reads that didn't align to <path>
#   --al <path>           write unpaired reads that aligned at least once to <path>
#   --un-conc <path>      write pairs that didn't align concordantly to <path>
#   --al-conc <path>      write pairs that aligned concordantly at least once to <path>
#   (Note: for --un, --al, --un-conc, or --al-conc, add '-gz' to the option name, e.g.
#   --un-gz <path>, to gzip compress output, or add '-bz2' to bzip2 compress output.)
#   --quiet            print nothing to stderr except serious errors
#   --met-file <path>  send metrics to file at <path> (off)
#   --met-stderr       send metrics to stderr (off)
#   --met <int>        report internal counters & metrics every <int> secs (1)
#   --no-unal          suppress SAM records for unaligned reads
#   --no-head          suppress header lines, i.e. lines starting with @
#   --no-sq            suppress @SQ header lines
#   --rg-id <text>     set read group id, reflected in @RG line and RG:Z: opt field
#   --rg <text>        add <text> ("lab:value") to @RG line of SAM header.
#                      Note: @RG line only printed when --rg-id is set.
#   --omit-sec-seq     put '*' in SEQ and QUAL fields for secondary alignments.
#   --sam-no-qname-trunc Suppress standard behavior of truncating readname at first whitespace
#                       at the expense of generating non-standard SAM.
#   --xeq              Use '='/'X', instead of 'M,' to specify matches/mismatches in SAM record.
#   --soft-clipped-unmapped-tlen Exclude soft-clipped bases when reporting TLEN
# 
#  Performance:
#   -p/--threads <int> number of alignment threads to launch (1)
#   --reorder          force SAM output order to match order of input reads
#   --mm               use memory-mapped I/O for index; many 'bowtie's can share
# 
#  Other:
#   --qc-filter        filter out reads that are bad according to QSEQ filter
#   --seed <int>       seed for random number generator (0)
#   --non-deterministic seed rand. gen. arbitrarily instead of using read attributes
#   --version          print version information and quit
#   -h/--help          print this usage message
#
# SAM output
# 
# Following is a brief description of the SAM format as output by bowtie2. For more details, see the SAM format specification.
# By default, bowtie2 prints a SAM header with @HD, @SQ and @PG lines. When one or more --rg arguments are specified, bowtie2 will also print an @RG line that includes all user-specified --rg tokens separated by tabs.
# Each subsequent line describes an alignment or, if the read failed to align, a read. Each line is a collection of at least 12 fields separated by tabs; from left to right, the fields are:
# 1. Name of read that aligned.
# 2. Sum of all applicable flags. Flags relevant to Bowtie are:
# 	1 The read is one of a pair
#	2 The alignment is one end of a proper paired-end alignment
# 	4 The read has no reported alignments
# 	8 The read is one of a pair and has no reported alignments
# 	16 The alignment is to the reverse reference strand
# 	32 The other mate in the paired-end alignment is aligned to the reverse reference strand
# 	64 The read is mate 1 in a pair
# 	128 The read is mate 2 in a pair
# 3. Name of reference sequence where alignment occurs
# 4. 1-based offset into the forward reference strand where leftmost character of the alignment occurs
# 5. Mapping quality
# 6. CIGAR string representation of alignment
# 7. Name of reference sequence where mate’s alignment occurs. Set to = if the mate’s reference sequence is the same as this alignment’s, or * if there is no mate.
# 8. 1-based offset into the forward reference strand where leftmost character of the mate’s alignment occurs. Offset is 0 if there is no mate.
# 9. Inferred fragment length. Size is negative if the mate’s alignment occurs upstream of this alignment. Size is 0 if the mates did not align concordantly. However, size is non-0 if the mates aligned discordantly to the same chromosome.
# 10.Read sequence (reverse-complemented if aligned to the reverse strand)
# 11.ASCII-encoded read qualities (reverse-complemented if the read aligned to the reverse strand). The encoded quality values are on the Phred quality scale and the encoding is ASCII-offset by 33 (ASCII char !), similarly to a FASTQ file.
# 	AS:i:<N>
# 	Alignment score. Can be negative. Can be greater than 0 in --local mode (but not in --end-to-end mode). Only present if SAM record is for an aligned read.
# 	XS:i:<N>
# 	Alignment score for the best-scoring alignment found other than the alignment reported. Can be negative. Can be greater than 0 in --local mode (but not in --end-to-end mode). Only present if the SAM record is for an aligned read and more than one alignment was found for the read. Note that, when the read is part of a concordantly-aligned pair, this score could be greater than AS:i.
# 	YS:i:<N>
# 	Alignment score for opposite mate in the paired-end alignment. Only present if the SAM record is for a read that aligned as part of a paired-end alignment.
# 	XN:i:<N>
# 	The number of ambiguous bases in the reference covering this alignment. Only present if SAM record is for an aligned read.
# 	XM:i:<N>
# 	The number of mismatches in the alignment. Only present if SAM record is for an aligned read.
# 	XO:i:<N>
# 	The number of gap opens, for both read and reference gaps, in the alignment. Only present if SAM record is for an aligned read.
# 	XG:i:<N>
# 	The number of gap extensions, for both read and reference gaps, in the alignment. Only present if SAM record is for an aligned read.
# 	NM:i:<N>
# 	The edit distance; that is, the minimal number of one-nucleotide edits (substitutions, insertions and deletions) needed to transform the read string into the reference string. Only present if SAM record is for an aligned read.
# 	YF:Z:<S>
# 	String indicating reason why the read was filtered out. See also: Filtering. Only appears for reads that were filtered out.
# 	YT:Z:<S>
# 	Value of UU indicates the read was not part of a pair. Value of CP indicates the read was part of a pair and the pair aligned concordantly. Value of DP indicates the read was part of a pair and the pair aligned discordantly. Value of UP indicates the read was part of a pair but the pair failed to aligned either concordantly or discordantly.
# 	MD:Z:<S>
# 	A string representation of the mismatched reference bases in the alignment. See SAM Tags format specification for details. Only present if SAM record is for an aligned read.
# 
